//Generated by typescript 1.8.10

// Compile with tsc '.\basic examples.ts' --declaration --sourcemap
// Run with node '.\basic examples.js'

var message = "Hello World";
console.log(message);
class Greeting {
  greet() {
    console.log("Hello World!!!");
  }
}
var obj = new Greeting();
obj.greet();

// *******************************************
//    TYPE ASSERTION <>
// *******************************************
console.log("\n\n*******************************************\n\tTYPES");
var name1: string = "John";
var score1: number = 50;
var score2: number = 42.5;
var sum = score1 + score2;
console.log("name" + name1);
console.log("first score: " + score1);
console.log("second score: " + score2);
console.log("sum of the scores: " + sum);
console.log("*******************************************");

// *******************************************
//    TYPE ASSERTION <>
// *******************************************
var str = "1";
var str2: number = <number>(<any>str); //str is now of type number
console.log(
  "\n\n*******************************************\n\tTYPE ASSERTION <>"
);
console.log(str2);
var str3: number = (str as any) as number; //str is now of type number
console.log(str3);
console.log("*******************************************");

// *******************************************
//    SCOPE
// *******************************************
console.log("\n\n*******************************************\n\tSCOPE");
var global_num = 12; //global variable
class Numbers {
  num_val = 13; //class variable
  static sval = 10; //static field

  storeNum(): void {
    var local_num = 14; //local variable
  }
}
console.log("Global num: " + global_num);
console.log(Numbers.sval); //static variable
var num = new Numbers();
console.log("Global num: " + num.num_val);
console.log("*******************************************");

// *******************************************
//    OPTIONAL PARAMETER
// *******************************************
console.log(
  "\n\n*******************************************\n\tOPTIONAL PARAMETER"
);
function disp_details(id: number, name: string, mail_id?: string) {
  console.log("ID:", id);
  console.log("Name", name);

  if (mail_id != undefined) console.log("Email Id", mail_id);
}
disp_details(123, "John");
disp_details(111, "mary", "mary@xyz.com");
console.log("*******************************************");

// *******************************************
//   Rest Parameters
// *******************************************
console.log(
  "\n\n*******************************************\n\tRest Parameters"
);
function addNumbers(...nums: number[]) {
  var i;
  var sum: number = 0;

  for (i = 0; i < nums.length; i++) {
    sum = sum + nums[i];
  }
  console.log("sum of the numbers", sum);
}
addNumbers(1, 2, 3);
addNumbers(10, 10, 10, 10, 10);
console.log("*******************************************");

// *******************************************
//   Default parameters
// *******************************************
console.log(
  "\n\n*******************************************\n\tDefault parameters"
);
function calculate_discount(price: number, rate: number = 0.5) {
  var discount = price * rate;
  console.log("Discount Amount: ", discount);
}
calculate_discount(1000);
calculate_discount(1000, 0.3);
console.log("*******************************************");

// *******************************************
//   union type
// *******************************************
console.log("\n\n*******************************************\n\tunion type");
function disp(name: string | string[]) {
  if (typeof name == "string") {
    console.log(name);
  } else {
    var i;

    for (i = 0; i < name.length; i++) {
      console.log(name[i]);
    }
  }
}
disp("mark");
console.log("Printing names array....");
disp(["Mark", "Tom", "Mary", "John"]);

var arr: number[] | string[];
var i: number;
arr = [1, 2, 4];
console.log("**numeric array**");

for (i = 0; i < arr.length; i++) {
  console.log(arr[i]);
}

arr = ["Mumbai", "Pune", "Delhi"];
console.log("**string array**");

for (i = 0; i < arr.length; i++) {
  console.log(arr[i]);
}
console.log("*******************************************");

// *******************************************
//   TypeScript ─ Class inheritance and Method Overriding
// *******************************************
console.log(
  "\n\n*******************************************\n\tTypeScript ─ Class inheritance and Method Overriding"
);
class PrinterClass {
  doPrint(): void {
    console.log("doPrint() from Parent called…");
  }
}

class StringPrinter extends PrinterClass {
  doPrint(): void {
    super.doPrint();
    console.log("doPrint() is printing a string…");
  }
}

var obj3 = new StringPrinter();
obj3.doPrint();
console.log("*******************************************");

// *******************************************
//   Classes and Interfaces
// *******************************************
console.log(
  "\n\n*******************************************\n\tClasses and Interfaces"
);
interface ILoan {
  interest: number;
}

class AgriLoan implements ILoan {
  interest: number;
  rebate: number;

  constructor(interest: number, rebate: number) {
    this.interest = interest;
    this.rebate = rebate;
  }
}

var obj5 = new AgriLoan(10, 1);
console.log("Interest is : " + obj5.interest + " Rebate is : " + obj5.rebate);
console.log("*******************************************");

// *******************************************
//   Duck-typing
// *******************************************
console.log("\n\n*******************************************\n\tDuck-typing");
interface IPoint {
  x: number;
  y: number;
}
function addPoints(p1: IPoint, p2: IPoint): IPoint {
  var x = p1.x + p2.x;
  var y = p1.y + p2.y;
  return { x: x, y: y };
}

//Valid
var newPoint = addPoints({ x: 3, y: 4 }, { x: 5, y: 1 });

// Error ////////////
// var newPoint2 = addPoints({x:1},{x:4,y:3})
// var newPoint2 = addPoints({x:1, y:2, z:3, o:3},{x:4,y:3})
////////////////////////////////////
console.log("*******************************************");

// *******************************************
//   REGION
// *******************************************
console.log("\n\n*******************************************\n\tREGION");

//#region reg
console.log("region in code");
//#endregion

console.log("*******************************************");

// *******************************************
//
// *******************************************
console.log("\n\n*******************************************\n\t");

console.log("*******************************************");
